C# 线程知识--使用Task执行异步操作
      在C#4.0之前需要执行一个复杂的异步操作时，只能使用CLR线程池技术来执行一个任务。线程池执行异步任务时,不知道任务何时完成,以及任务的在任务完成后不能获取到返回值。但是在C#4.0中引人了一个的任务（System.Threading.Tasks命名空间的类型）机制来解决异步操作完成时间和完成后返回值的问题。

1.使用Task类创建并执行简单任务

    通过使用Task的构造函数来创建任务，并调用Start方法来启动任务并执行异步操作。创建任务时，必须传递一个Action或Action<Object>类型的委托回调方法，可以选择的传递任务执行时说需要的数据对象等。Task类的构造函数如下：

        public Task(Action action);
        public Task(Action<object> action, object state);
        public Task(Action action, CancellationToken cancellationToken);
        public Task(Action action, TaskCreationOptions creationOptions);
        public Task(Action<object> action, object state, CancellationToken cancellationToken);
        public Task(Action<object> action, object state, TaskCreationOptions creationOptions);
        public Task(Action action, CancellationToken cancellationToken, TaskCreationOptions creationOptions);
        public Task(Action<object> action, object state, CancellationToken cancellationToken, TaskCreationOptions creationOptions);
示例代码：

   1:  static void Main(string[] args)
   2:          {
   3:              Console.WriteLine("主线程执行业务处理.");
   4:              //创建任务
   5:              Task task = new Task(() => {
   6:                  Console.WriteLine("使用System.Threading.Tasks.Task执行异步操作.");
   7:                  for (int i = 0; i < 10; i++)
   8:                  {
   9:                      Console.WriteLine(i);
  10:                  }
  11:              });
  12:              //启动任务,并安排到当前任务队列线程中执行任务(System.Threading.Tasks.TaskScheduler)
  13:              task.Start();
  14:              Console.WriteLine("主线程执行其他处理");
  15:              //主线程挂起1000毫秒，等待任务的完成。
  16:              Thread.Sleep(1000);
  17:          }
任务调度结果：image

2.等待任务的完成并获取返回值

     使用任务执行异步操作时，最主要的是要后的任务完成时的返回值。在任务类中有一个实例方法Wait（有许多重载版本）他能等待任务的完成，我们也可以通过Task类的派生类Task<TResult>创建一个异步任务，并指定任务完成时返回值的类型，这样可以通过Task<TResult>的实例对象获取到任务完成后的返回值。创建一个异步任务并执行0到100求和操作返回最后的计算结果，示例代码：

   1:  static void TaskWait() {
   2:              //创建任务
   3:              Task<int> task = new Task<int>(() =>
   4:              {
   5:                  int sum = 0;
   6:                  Console.WriteLine("使用Task执行异步操作.");
   7:                  for (int i = 0; i < 100; i++)
   8:                  {
   9:                      sum+=i;
  10:                  }
  11:                  return sum;
  12:              });
  13:              //启动任务,并安排到当前任务队列线程中执行任务(System.Threading.Tasks.TaskScheduler)
  14:              task.Start();
  15:   
  16:              Console.WriteLine("主线程执行其他处理");
  17:              //等待任务的完成执行过程。
  18:              task.Wait();
  19:              //获得任务的执行结果
  20:              Console.WriteLine("任务执行结果：{0}", task.Result.ToString());
  21:  }
执行结果：image
Task类还有一些静态方法，WaitAll用于等待提供的所有 System.Threading.Tasks.Task 对象完成执行过程和Wait用于等待提供的任一个 System.Threading.Tasks.Task 对象完成执行过程，这两个方法都有一些重载版本。

//等待所有任务完成  
public static void WaitAll(params Task[] tasks);
//等待任意一个任务完成
public static int WaitAny(params Task[] tasks);
3.使用ContinueWith方法在任务完成时启动一个新任务

     在使用能够Task类的Wait方法等待一个任务时或派生类的Result属性获得任务执行结果都有可能阻塞线程，为了解决这个问题可以使用ContinueWith方法，他能在一个任务完成时自动启动一个新的任务来处理执行结果。

示例代码：

   1:  static void TaskContinueWith()
   2:          {
   3:              //创建一个任务
   4:              Task<int> task = new Task<int>(() =>
   5:              {
   6:                  int sum = 0;
   7:                  Console.WriteLine("使用Task执行异步操作.");
   8:                  for (int i = 0; i < 100; i++)
   9:                  {
  10:                      sum += i;
  11:                  }
  12:                  return sum;
  13:              });
  14:              //启动任务,并安排到当前任务队列线程中执行任务(System.Threading.Tasks.TaskScheduler)
  15:              task.Start();
  16:              Console.WriteLine("主线程执行其他处理");
  17:              //任务完成时执行处理。
  18:              Task cwt = task.ContinueWith(t => { 
  19:                  Console.WriteLine("任务完成后的执行结果：{0}", t.Result.ToString()); 
  20:              });
  21:              Thread.Sleep(1000);
  22:          }
执行结果：image

上述示例中任务不是等待完成来显示执行结果，而是使用ContinueWith方法，它能够知道任务在什么时候完成并启动一个新的任务来执行任务完成后的处理。ContinueWith方法具有一些重载版本，这些重载版本允许指定延续任务需要使用的数据、延续任务的工作方式（System.Threading.Tasks.TaskContinuationOptions的枚举值按位OR运行的结果）等。

4.创建父子任务和任务工厂的使用

    通过Task类创建的任务是顶级任务，可以通过使用 TaskCreationOptions.AttachedToParent 标识把这些任务与创建他的任务相关联，所有子任务全部完成以后父任务才会结束操作。示例如下：

   1:  static void ParentChildTask() {
   2:              Task<string[]> parent = new Task<string[]>(state => {
   3:                  Console.WriteLine(state);
   4:                  string[] result=new string[2];
   5:                  //创建并启动子任务
   6:                  new Task(() => { result[0]= "我是子任务1。"; },TaskCreationOptions.AttachedToParent).Start();
   7:                  new Task(() => { result[1] = "我是子任务2。"; }, TaskCreationOptions.AttachedToParent).Start();
   8:                  return result;
   9:              },"我是父任务，并在我的处理过程中创建多个子任务，所有子任务完成以后我才会结束执行。");
  10:              //任务处理完成后执行的操作
  11:              parent.ContinueWith(t => {
  12:                  Array.ForEach(t.Result, r=>Console.WriteLine(r));
  13:              });
  14:              //启动父任务
  15:              parent.Start();
  16:              Console.Read();
  17:          }
执行结果：image

    如果需要创建一组具有相同状态的任务时，可以使用TaskFactory类或TaskFactory<TResult>类。这两个类创建一组任务时可以指定任务的CancellationToken、TaskCreationOptions、TaskContinuationOptions和TaskScheduler默认值。示例代码:

   1:          static void TaskFactoryApply()
   2:          {
   3:              Task parent = new Task(() =>
   4:              {
   5:                  CancellationTokenSource cts = new CancellationTokenSource(5000);
   6:                  //创建任务工厂
   7:                  TaskFactory tf = new TaskFactory(cts.Token, TaskCreationOptions.AttachedToParent, TaskContinuationOptions.ExecuteSynchronously, TaskScheduler.Default);
   8:                  //添加一组具有相同状态的子任务
   9:                  Task[] task = new Task[]{
  10:                      tf.StartNew(() => { Console.WriteLine("我是任务工厂里的第一个任务。"); }),
  11:                      tf.StartNew(() => { Console.WriteLine("我是任务工厂里的第二个任务。"); }),
  12:                      tf.StartNew(() => { Console.WriteLine("我是任务工厂里的第三个任务。"); })
  13:                  };
  14:              });
  15:              parent.Start();
  16:              Console.Read();
  17:          }
执行结果：image

5.任务内部实现和任务调度

    任务内部有一组构成任务状态的属性，标识任务的唯一Id、表示任务的执行状态（TaskStatus）、任务创建时提供的回调函数的引用和传递给回调函数的数据对象AsyncState、对任务创建时的任务调度对象（TaskScheduler）的引用、对父任务的引用以及对执行上下文的引用和ManualResetEventSlim对象的引用。Task类和Task<TResult>类都实现了标准的释放资源的接口，允许在任务完成处理的时候使用Dispose方法释放资源（关闭ManualResetEventSlim对象实例）。可以使用Task类的CurrentId属性获得正在执行的任务的Id，如果没有任务在执行CurrentId返回值为null，CurrentId是一个int？可空类型的属性。任务执行的生命周期通过TaskStatus类型的一个值来表示，TaskStatus所包含的值：

public enum TaskStatus
        {
            Created = 0,
            WaitingForActivation = 1,
            WaitingToRun = 2,
            Running = 3,
            WaitingForChildrenToComplete = 4,
            RanToCompletion = 5,
            Canceled = 6,
            Faulted = 7,
        }
      我们可以通过Task类的Exception属性获得任务在执行过程中的所有异常，Exception是一个AggregateException类型的属性。Task类提供了IsCanceled、IsCompleted、IsFaulted属性来获得任务的完成状态。通过ContinueWith、ContinueWhenAll、ContinueWhenAny和FromAsync创建的后续任务都处于WaitingForActivation 状态，这个状态的任务会在父任务完成后自动执行。

      在任务内部由TaskScheduler类调度任务的执行，该类是一个抽象类，FCL中从他派生了两个派生类：ThreadPoolTaskScheduler线程池任务调度器和SynchronizationContextTaskScheduler同步上下文任务调度器。所有任务默认都是采用ThreadPoolTaskScheduler调度任务，他是采用线程池来执行任务，可以通过TaskScheduler类的静态属性Default获得对默认任务调度器的引用。SynchronizationContextTaskScheduler任务调度器能够用在Window form、WPF等应用程序，他的任务调度是采用的GUI线程，所以他能同步更新UI组件，可以通过TaskScheduler类的静态方法FromCurrentSynchronizationContext获得对一个同步上下文任务调度起的引用。

任务调度示例：

   1:    private void button1_Click(object sender, EventArgs e)
   2:          {
   3:               //获得同步上下文任务调度器
   4:             TaskScheduler m_syncContextTaskScheduler = TaskScheduler.FromCurrentSynchronizationContext();
   5:   
   6:              //创建任务，并采用默认任务调度器（线程池任务调度器）执行任务
   7:              Task<int> task = new Task<int>(() =>
   8:              {
   9:                  //执行复杂的计算任务。
  10:                  Thread.Sleep(2000);
  11:                  int sum = 0;
  12:                  for (int i = 0; i < 100; i++)
  13:                  {
  14:                      sum += i;
  15:                  }
  16:                  return sum;
  17:              });
  18:               var cts=new CancellationTokenSource();
  19:              //任务完成时启动一个后续任务，并采用同步上下文任务调度器调度任务更新UI组件。
  20:              task.ContinueWith(t => {this.label1.Text="采用SynchronizationContextTaskScheduler任务调度器更新UI。\r\n计算结果是："+task.Result.ToString(); },
  21:                 cts.Token ,TaskContinuationOptions.AttachedToParent,m_syncContextTaskScheduler);
  22:              task.Start();
  23:          }
执行结果：image

    本文简单的介绍了使用Task类来执行异步操作以及任务的内部实现与任务调度。在执行复杂异步操作时，可以采用任务来执行，他能更好的知道异步操作在何时完成以及返回异步操作的执行结果。

改善C#程序的建议9：使用Task代替ThreadPool和Thread
一：Task的优势

ThreadPool相比Thread来说具备了很多优势，但是ThreadPool却又存在一些使用上的不方便。比如：

1: ThreadPool不支持线程的取消、完成、失败通知等交互性操作；

2: ThreadPool不支持线程执行的先后次序；

以往，如果开发者要实现上述功能，需要完成很多额外的工作，现在，FCL中提供了一个功能更强大的概念：Task。Task在线程池的基础上进行了优化，并提供了更多的API。在FCL4.0中，如果我们要编写多线程程序，Task显然已经优于传统的方式。

以下是一个简单的任务示例：

复制代码
staticvoid Main(string[] args)
{
Task t =new Task(() =>
{
Console.WriteLine("任务开始工作……");
//模拟工作过程
Thread.Sleep(5000);
});
t.Start();
t.ContinueWith((task) =>
{
Console.WriteLine("任务完成，完成时候的状态为：");
Console.WriteLine("IsCanceled={0}\tIsCompleted={1}\tIsFaulted={2}", task.IsCanceled, task.IsCompleted, task.IsFaulted);
});
Console.ReadKey();
}
复制代码

二：Task的完成状态

任务Task有这样一些属性，让我们查询任务完成时的状态：

1: IsCanceled，因为被取消而完成；

2: IsCompleted，成功完成；

3: IsFaulted，因为发生异常而完成

需要注意的是，任务并没有提供回调事件来通知完成（像BackgroundWorker一样），它通过启用一个新任务的方式来完成类似的功能。ContinueWith方法可以在一个任务完成的时候发起一个新任务，这种方式天然就支持了任务的完成通知：我们可以在新任务中获取原任务的结果值。

       下面是一个稍微复杂一点的例子，同时支持完成通知、取消、获取任务返回值等功能：

复制代码
staticvoid Main(string[] args)
{
CancellationTokenSource cts =new CancellationTokenSource();
Task<int> t =new Task<int>(() => Add(cts.Token), cts.Token);
t.Start();
t.ContinueWith(TaskEnded);
//等待按下任意一个键取消任务
Console.ReadKey();
cts.Cancel();
Console.ReadKey();
}

staticvoid TaskEnded(Task<int> task)
{
Console.WriteLine("任务完成，完成时候的状态为：");
Console.WriteLine("IsCanceled={0}\tIsCompleted={1}\tIsFaulted={2}", task.IsCanceled, task.IsCompleted, task.IsFaulted);
Console.WriteLine("任务的返回值为：{0}", task.Result);
}

staticint Add(CancellationToken ct)
{
Console.WriteLine("任务开始……");
int result =0;
while (!ct.IsCancellationRequested)
{
result++;
Thread.Sleep(1000);
}
return result;
}
复制代码
在任务开始后大概3秒钟的时候按下键盘，会得到如下的输出：

任务开始……
任务完成，完成时候的状态为：
IsCanceled=False IsCompleted=True IsFaulted=False
任务的返回值为：3
你也许会奇怪，我们的任务是通过Cancel的方式处理，为什么完成的状态IsCanceled那一栏还是False。这是因为在工作任务中，我们对于IsCancellationRequested进行了业务逻辑上的处理，并没有通过ThrowIfCancellationRequested方法进行处理。如果采用后者的方式，如下：

复制代码
staticvoid Main(string[] args)
{
CancellationTokenSource cts =new CancellationTokenSource();
Task<int> t =new Task<int>(() => AddCancleByThrow(cts.Token), cts.Token);
t.Start();
t.ContinueWith(TaskEndedByCatch);
//等待按下任意一个键取消任务
Console.ReadKey();
cts.Cancel();
Console.ReadKey();
}

staticvoid TaskEndedByCatch(Task<int> task)
{
Console.WriteLine("任务完成，完成时候的状态为：");
Console.WriteLine("IsCanceled={0}\tIsCompleted={1}\tIsFaulted={2}", task.IsCanceled, task.IsCompleted, task.IsFaulted);
try
{
Console.WriteLine("任务的返回值为：{0}", task.Result);
}
catch (AggregateException e)
{
e.Handle((err) => err is OperationCanceledException);
}
}

staticint AddCancleByThrow(CancellationToken ct)
{
Console.WriteLine("任务开始……");
int result =0;
while (true)
{
ct.ThrowIfCancellationRequested();
result++;
Thread.Sleep(1000);
}
return result;
}
复制代码
那么输出为：

任务开始……
任务完成，完成时候的状态为：
IsCanceled=True IsCompleted=True IsFaulted=False
在任务结束求值的方法TaskEndedByCatch中，如果任务是通过ThrowIfCancellationRequested方法结束的，对任务求结果值将会抛出异常OperationCanceledException，而不是得到抛出异常前的结果值。这意味着任务是通过异常的方式被取消掉的，所以可以注意到上面代码的输出中，状态IsCancled为True。

再一次，我们注意到取消是通过异常的方式实现的，而表示任务中发生了异常的IsFaulted状态却还是等于False。这是因为ThrowIfCancellationRequested是协作式取消方式类型CancellationTokenSource的一个方法，CLR进行了特殊的处理。CLR知道这一行程序开发者有意为之的代码，所以不把它看作是一个异常（它被理解为取消）。要得到IsFaulted等于True的状态，我们可以修改While循环，模拟一个异常出来：

复制代码
while (true)
{
//ct.ThrowIfCancellationRequested();
if (result ==5)
{
thrownew Exception("error");
}
result++;
Thread.Sleep(1000);
}
复制代码
模拟异常后的输出为：

任务开始……
任务完成，完成时候的状态为：
IsCanceled=False IsCompleted=True IsFaulted=True

三：任务工厂

Task还支持任务工厂的概念。任务工厂支持多个任务之间共享相同的状态，如取消类型CancellationTokenSource就是可以被共享的。通过使用任务工厂，可以同时取消一组任务：

复制代码
staticvoid Main(string[] args)
{
CancellationTokenSource cts =new CancellationTokenSource();
//等待按下任意一个键取消任务
TaskFactory taskFactory =new TaskFactory();
Task[] tasks =new Task[]
{
taskFactory.StartNew(() => Add(cts.Token)),
taskFactory.StartNew(() => Add(cts.Token)),
taskFactory.StartNew(() => Add(cts.Token))
};
//CancellationToken.None指示TasksEnded不能被取消
taskFactory.ContinueWhenAll(tasks, TasksEnded, CancellationToken.None);
Console.ReadKey();
cts.Cancel();
Console.ReadKey();
}

staticvoid TasksEnded(Task[] tasks)
{
Console.WriteLine("所有任务已完成！");
}
复制代码
以上代码输出为：

任务开始……
任务开始……
任务开始……
所有任务已完成（取消）！
本建议演示了Task（任务）和TaskFactory（任务工厂）的使用方法。Task甚至进一步优化了后台线程池的调度，加快了线程的处理速度。在FCL4.0时代，使用多线程，我们理应更多地使用Task。

 微信扫一扫，关注最课程（www.zuikc.com），获取更多我的文章，获取软件开发每日一练

之前内容：

改善C#程序的建议8：避免锁定不恰当的同步对象
改善C#程序的建议7：正确停止线程
改善C#程序的建议6：在线程同步中使用信号量
改善C#程序的建议5：引用类型赋值为null与加速垃圾回收
改善C#程序的建议4：C#中标准Dispose模式的实现
改善C#程序的建议3：在C#中选择正确的集合进行编码
改善C#程序的建议2：C#中dynamic的正确用法
改善C#程序的建议1：非用ICloneable不可的理由
Creative Commons License
本文基于Creative Commons Attribution 2.5 China Mainland License发布，欢迎转载，演绎或用于商业目的，但是必须保留本文的署名http://www.cnblogs.com/luminji（包含链接）。如您有任何疑问或者授权方面的协商，请给我留言。 
